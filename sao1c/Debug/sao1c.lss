
sao1c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000000e4  0000431c  0000031c  00000390  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000000  00800040  00800040  00000474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000030  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004c4  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000040a  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002dc  00000000  00000000  00000dce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000010ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002b6  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000433  00000000  00000000  00001386  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  000017b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0a c0       	rjmp	.+20     	; 0x16 <__ctors_end>
   2:	11 c0       	rjmp	.+34     	; 0x26 <__bad_interrupt>
   4:	10 c0       	rjmp	.+32     	; 0x26 <__bad_interrupt>
   6:	0f c0       	rjmp	.+30     	; 0x26 <__bad_interrupt>
   8:	0e c0       	rjmp	.+28     	; 0x26 <__bad_interrupt>
   a:	0d c0       	rjmp	.+26     	; 0x26 <__bad_interrupt>
   c:	0c c0       	rjmp	.+24     	; 0x26 <__bad_interrupt>
   e:	0b c0       	rjmp	.+22     	; 0x26 <__bad_interrupt>
  10:	0a c0       	rjmp	.+20     	; 0x26 <__bad_interrupt>
  12:	09 c0       	rjmp	.+18     	; 0x26 <__bad_interrupt>
  14:	08 c0       	rjmp	.+16     	; 0x26 <__bad_interrupt>

00000016 <__ctors_end>:
  16:	11 27       	eor	r17, r17
  18:	1f bf       	out	0x3f, r17	; 63
  1a:	cf e5       	ldi	r28, 0x5F	; 95
  1c:	d0 e0       	ldi	r29, 0x00	; 0
  1e:	de bf       	out	0x3e, r29	; 62
  20:	cd bf       	out	0x3d, r28	; 61
  22:	02 d0       	rcall	.+4      	; 0x28 <main>
  24:	79 c1       	rjmp	.+754    	; 0x318 <_exit>

00000026 <__bad_interrupt>:
  26:	ec cf       	rjmp	.-40     	; 0x0 <__vectors>

00000028 <main>:
	 4, 3, 2, 1, 0};*/

int main(void)
{
	//8MHz
	CCP    = 0xD8;
  28:	48 ed       	ldi	r20, 0xD8	; 216
  2a:	4c bf       	out	0x3c, r20	; 60
	CLKMSR = 0x00;
  2c:	17 bf       	out	0x37, r17	; 55
	CCP    = 0xD8;
  2e:	4c bf       	out	0x3c, r20	; 60
	CLKPSR = 0X00;
  30:	16 bf       	out	0x36, r17	; 54
	//LEDs output
	DDRB  = (1 << DDB2);
  32:	44 e0       	ldi	r20, 0x04	; 4
  34:	41 b9       	out	0x01, r20	; 1
	PUEB  = ~(1<<PUEB2);
  36:	5b ef       	ldi	r21, 0xFB	; 251
  38:	53 b9       	out	0x03, r21	; 3
	PORTB = (1<<PORTB2);
  3a:	42 b9       	out	0x02, r20	; 2
		
    /* Replace with your application code */
    uint8_t i = 0;
  3c:	60 e0       	ldi	r22, 0x00	; 0
  3e:	01 c0       	rjmp	.+2      	; 0x42 <__SREG__+0x3>
	    *(p++) = *t;
		writeGRB8((uint8_t*)0x40);
		_delay_ms(100);
		i = i + 1;
		if(i == lineWidth + 1)
			i = 0;
  40:	60 e0       	ldi	r22, 0x00	; 0
    /* Replace with your application code */
    uint8_t i = 0;
	while (1) 
    {		
		uint8_t *p = (uint8_t*)0x40;//frame;
		uint8_t *t = (uint8_t*)&(text[4 * lineWidth + i + 4]);
  42:	e6 2f       	mov	r30, r22
  44:	f0 e0       	ldi	r31, 0x00	; 0
  46:	ec 52       	subi	r30, 0x2C	; 44
  48:	fc 4b       	sbci	r31, 0xBC	; 188
		*(p++) = *(t--);
  4a:	40 81       	ld	r20, Z
  4c:	40 a9       	sts	0x40, r20	; 0x800040 <__DATA_REGION_ORIGIN__>
		*(p++) = *(t--);
  4e:	ae 2f       	mov	r26, r30
  50:	bf 2f       	mov	r27, r31
  52:	a1 50       	subi	r26, 0x01	; 1
  54:	b1 0b       	sbc	r27, r17
  56:	4c 91       	ld	r20, X
  58:	41 a9       	sts	0x41, r20	; 0x800041 <__DATA_REGION_ORIGIN__+0x1>
		*(p++) = *(t--);
  5a:	a1 50       	subi	r26, 0x01	; 1
  5c:	b1 0b       	sbc	r27, r17
  5e:	4c 91       	ld	r20, X
  60:	42 a9       	sts	0x42, r20	; 0x800042 <__DATA_REGION_ORIGIN__+0x2>
		*(p++) = *(t--);
  62:	a1 50       	subi	r26, 0x01	; 1
  64:	b1 0b       	sbc	r27, r17
  66:	4c 91       	ld	r20, X
  68:	43 a9       	sts	0x43, r20	; 0x800043 <__DATA_REGION_ORIGIN__+0x3>
		*(p++) = *t;
  6a:	a1 50       	subi	r26, 0x01	; 1
  6c:	b1 0b       	sbc	r27, r17
  6e:	4c 91       	ld	r20, X
  70:	44 a9       	sts	0x44, r20	; 0x800044 <__DATA_REGION_ORIGIN__+0x4>
		t -= lineWidth;
		*(p++) = *(t++);
  72:	ad 52       	subi	r26, 0x2D	; 45
  74:	b1 0b       	sbc	r27, r17
  76:	4c 91       	ld	r20, X
  78:	45 a9       	sts	0x45, r20	; 0x800045 <__DATA_REGION_ORIGIN__+0x5>
		*(p++) = *(t++);
  7a:	af 5f       	subi	r26, 0xFF	; 255
  7c:	bf 4f       	sbci	r27, 0xFF	; 255
  7e:	4c 91       	ld	r20, X
  80:	46 a9       	sts	0x46, r20	; 0x800046 <__DATA_REGION_ORIGIN__+0x6>
		*(p++) = *(t++);
  82:	af 5f       	subi	r26, 0xFF	; 255
  84:	bf 4f       	sbci	r27, 0xFF	; 255
  86:	4c 91       	ld	r20, X
  88:	47 a9       	sts	0x47, r20	; 0x800047 <__DATA_REGION_ORIGIN__+0x7>
		*(p++) = *(t++);
  8a:	af 5f       	subi	r26, 0xFF	; 255
  8c:	bf 4f       	sbci	r27, 0xFF	; 255
  8e:	4c 91       	ld	r20, X
  90:	48 a9       	sts	0x48, r20	; 0x800048 <__DATA_REGION_ORIGIN__+0x8>
		*(p++) = *t;
  92:	af 5f       	subi	r26, 0xFF	; 255
  94:	bf 4f       	sbci	r27, 0xFF	; 255
  96:	4c 91       	ld	r20, X
  98:	49 a9       	sts	0x49, r20	; 0x800049 <__DATA_REGION_ORIGIN__+0x9>
		t -= lineWidth;
		*(p++) = *(t--);
  9a:	ad 52       	subi	r26, 0x2D	; 45
  9c:	b1 0b       	sbc	r27, r17
  9e:	4c 91       	ld	r20, X
  a0:	4a a9       	sts	0x4a, r20	; 0x80004a <__DATA_REGION_ORIGIN__+0xa>
		*(p++) = *(t--);
  a2:	a1 50       	subi	r26, 0x01	; 1
  a4:	b1 0b       	sbc	r27, r17
  a6:	4c 91       	ld	r20, X
  a8:	4b a9       	sts	0x4b, r20	; 0x80004b <__DATA_REGION_ORIGIN__+0xb>
		*(p++) = *(t--);
  aa:	a1 50       	subi	r26, 0x01	; 1
  ac:	b1 0b       	sbc	r27, r17
  ae:	4c 91       	ld	r20, X
  b0:	4c a9       	sts	0x4c, r20	; 0x80004c <__DATA_REGION_ORIGIN__+0xc>
		*(p++) = *(t--);
  b2:	a1 50       	subi	r26, 0x01	; 1
  b4:	b1 0b       	sbc	r27, r17
  b6:	4c 91       	ld	r20, X
  b8:	4d a9       	sts	0x4d, r20	; 0x80004d <__DATA_REGION_ORIGIN__+0xd>
		*(p++) = *t;
  ba:	a1 50       	subi	r26, 0x01	; 1
  bc:	b1 0b       	sbc	r27, r17
  be:	4c 91       	ld	r20, X
  c0:	4e a9       	sts	0x4e, r20	; 0x80004e <__DATA_REGION_ORIGIN__+0xe>
		t -= lineWidth;
		*(p++) = *(t++);
  c2:	ad 52       	subi	r26, 0x2D	; 45
  c4:	b1 0b       	sbc	r27, r17
  c6:	4c 91       	ld	r20, X
  c8:	4f a9       	sts	0x4f, r20	; 0x80004f <__DATA_REGION_ORIGIN__+0xf>
		*(p++) = *(t++);
  ca:	af 5f       	subi	r26, 0xFF	; 255
  cc:	bf 4f       	sbci	r27, 0xFF	; 255
  ce:	4c 91       	ld	r20, X
  d0:	40 ab       	sts	0x50, r20	; 0x800050 <__DATA_REGION_ORIGIN__+0x10>
		*(p++) = *(t++);
  d2:	af 5f       	subi	r26, 0xFF	; 255
  d4:	bf 4f       	sbci	r27, 0xFF	; 255
  d6:	4c 91       	ld	r20, X
  d8:	41 ab       	sts	0x51, r20	; 0x800051 <__DATA_REGION_ORIGIN__+0x11>
		*(p++) = *(t++);
  da:	af 5f       	subi	r26, 0xFF	; 255
  dc:	bf 4f       	sbci	r27, 0xFF	; 255
  de:	4c 91       	ld	r20, X
  e0:	42 ab       	sts	0x52, r20	; 0x800052 <__DATA_REGION_ORIGIN__+0x12>
		*(p++) = *t;
  e2:	af 5f       	subi	r26, 0xFF	; 255
  e4:	bf 4f       	sbci	r27, 0xFF	; 255
  e6:	4c 91       	ld	r20, X
  e8:	43 ab       	sts	0x53, r20	; 0x800053 <__DATA_REGION_ORIGIN__+0x13>
		t -= lineWidth;
		*(p++) = *(t--);
  ea:	ad 52       	subi	r26, 0x2D	; 45
  ec:	b1 0b       	sbc	r27, r17
  ee:	4c 91       	ld	r20, X
  f0:	44 ab       	sts	0x54, r20	; 0x800054 <__DATA_REGION_ORIGIN__+0x14>
		*(p++) = *(t--);
  f2:	a1 50       	subi	r26, 0x01	; 1
  f4:	b1 0b       	sbc	r27, r17
  f6:	4c 91       	ld	r20, X
  f8:	45 ab       	sts	0x55, r20	; 0x800055 <__DATA_REGION_ORIGIN__+0x15>
		*(p++) = *(t--);
  fa:	a1 50       	subi	r26, 0x01	; 1
  fc:	b1 0b       	sbc	r27, r17
  fe:	4c 91       	ld	r20, X
 100:	46 ab       	sts	0x56, r20	; 0x800056 <__DATA_REGION_ORIGIN__+0x16>
		*(p++) = *(t--);
 102:	a1 50       	subi	r26, 0x01	; 1
 104:	b1 0b       	sbc	r27, r17
 106:	4c 91       	ld	r20, X
 108:	47 ab       	sts	0x57, r20	; 0x800057 <__DATA_REGION_ORIGIN__+0x17>
	    *(p++) = *t;
 10a:	e8 5b       	subi	r30, 0xB8	; 184
 10c:	f1 0b       	sbc	r31, r17
 10e:	40 81       	ld	r20, Z
 110:	48 ab       	sts	0x58, r20	; 0x800058 <__DATA_REGION_ORIGIN__+0x18>
inline void writeGRB8(const uint8_t *grb)
{
	asm volatile(
 112:	e0 e4       	ldi	r30, 0x40	; 64
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	49 e1       	ldi	r20, 0x19	; 25
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	24 e0       	ldi	r18, 0x04	; 4
 11c:	51 91       	ld	r21, Z+

0000011e <byteLoop8>:
 11e:	22 b9       	out	0x02, r18	; 2
 120:	15 2f       	mov	r17, r21
 122:	12 23       	and	r17, r18
 124:	12 b9       	out	0x02, r17	; 2
 126:	55 1f       	adc	r21, r21
 128:	05 2f       	mov	r16, r21
 12a:	32 b9       	out	0x02, r19	; 2
 12c:	00 00       	nop
 12e:	00 00       	nop
 130:	00 00       	nop
 132:	22 b9       	out	0x02, r18	; 2
 134:	10 2f       	mov	r17, r16
 136:	12 23       	and	r17, r18
 138:	12 b9       	out	0x02, r17	; 2
 13a:	00 1f       	adc	r16, r16
 13c:	00 00       	nop
 13e:	32 b9       	out	0x02, r19	; 2
 140:	00 00       	nop
 142:	00 00       	nop
 144:	00 00       	nop
 146:	22 b9       	out	0x02, r18	; 2
 148:	10 2f       	mov	r17, r16
 14a:	12 23       	and	r17, r18
 14c:	12 b9       	out	0x02, r17	; 2
 14e:	07 95       	ror	r16
 150:	07 95       	ror	r16
 152:	32 b9       	out	0x02, r19	; 2
 154:	00 00       	nop
 156:	00 00       	nop
 158:	00 00       	nop
 15a:	22 b9       	out	0x02, r18	; 2
 15c:	10 2f       	mov	r17, r16
 15e:	12 23       	and	r17, r18
 160:	12 b9       	out	0x02, r17	; 2
 162:	00 1f       	adc	r16, r16
 164:	00 00       	nop
 166:	32 b9       	out	0x02, r19	; 2
 168:	00 00       	nop
 16a:	00 00       	nop
 16c:	00 00       	nop
 16e:	22 b9       	out	0x02, r18	; 2
 170:	10 2f       	mov	r17, r16
 172:	12 23       	and	r17, r18
 174:	12 b9       	out	0x02, r17	; 2
 176:	00 1f       	adc	r16, r16
 178:	00 00       	nop
 17a:	32 b9       	out	0x02, r19	; 2
 17c:	00 00       	nop
 17e:	00 00       	nop
 180:	00 00       	nop
 182:	22 b9       	out	0x02, r18	; 2
 184:	10 2f       	mov	r17, r16
 186:	12 23       	and	r17, r18
 188:	12 b9       	out	0x02, r17	; 2
 18a:	07 95       	ror	r16
 18c:	07 95       	ror	r16
 18e:	32 b9       	out	0x02, r19	; 2
 190:	00 00       	nop
 192:	00 00       	nop
 194:	00 00       	nop
 196:	22 b9       	out	0x02, r18	; 2
 198:	10 2f       	mov	r17, r16
 19a:	12 23       	and	r17, r18
 19c:	12 b9       	out	0x02, r17	; 2
 19e:	00 1f       	adc	r16, r16
 1a0:	00 00       	nop
 1a2:	32 b9       	out	0x02, r19	; 2
 1a4:	00 00       	nop
 1a6:	00 00       	nop
 1a8:	00 00       	nop
 1aa:	22 b9       	out	0x02, r18	; 2
 1ac:	10 2f       	mov	r17, r16
 1ae:	12 23       	and	r17, r18
 1b0:	12 b9       	out	0x02, r17	; 2
 1b2:	07 95       	ror	r16
 1b4:	07 95       	ror	r16
 1b6:	32 b9       	out	0x02, r19	; 2
 1b8:	07 95       	ror	r16
 1ba:	07 95       	ror	r16
 1bc:	00 00       	nop
 1be:	22 b9       	out	0x02, r18	; 2
 1c0:	10 2f       	mov	r17, r16
 1c2:	12 23       	and	r17, r18
 1c4:	12 b9       	out	0x02, r17	; 2
 1c6:	00 1f       	adc	r16, r16
 1c8:	00 00       	nop
 1ca:	32 b9       	out	0x02, r19	; 2
 1cc:	00 00       	nop
 1ce:	00 00       	nop
 1d0:	00 00       	nop
 1d2:	22 b9       	out	0x02, r18	; 2
 1d4:	10 2f       	mov	r17, r16
 1d6:	12 23       	and	r17, r18
 1d8:	12 b9       	out	0x02, r17	; 2
 1da:	00 1f       	adc	r16, r16
 1dc:	00 00       	nop
 1de:	32 b9       	out	0x02, r19	; 2
 1e0:	00 00       	nop
 1e2:	00 00       	nop
 1e4:	00 00       	nop
 1e6:	22 b9       	out	0x02, r18	; 2
 1e8:	10 2f       	mov	r17, r16
 1ea:	12 23       	and	r17, r18
 1ec:	12 b9       	out	0x02, r17	; 2
 1ee:	07 95       	ror	r16
 1f0:	07 95       	ror	r16
 1f2:	32 b9       	out	0x02, r19	; 2
 1f4:	00 00       	nop
 1f6:	00 00       	nop
 1f8:	00 00       	nop
 1fa:	22 b9       	out	0x02, r18	; 2
 1fc:	10 2f       	mov	r17, r16
 1fe:	12 23       	and	r17, r18
 200:	12 b9       	out	0x02, r17	; 2
 202:	00 1f       	adc	r16, r16
 204:	00 00       	nop
 206:	32 b9       	out	0x02, r19	; 2
 208:	00 00       	nop
 20a:	00 00       	nop
 20c:	00 00       	nop
 20e:	22 b9       	out	0x02, r18	; 2
 210:	10 2f       	mov	r17, r16
 212:	12 23       	and	r17, r18
 214:	12 b9       	out	0x02, r17	; 2
 216:	00 1f       	adc	r16, r16
 218:	00 00       	nop
 21a:	32 b9       	out	0x02, r19	; 2
 21c:	00 00       	nop
 21e:	00 00       	nop
 220:	00 00       	nop
 222:	22 b9       	out	0x02, r18	; 2
 224:	10 2f       	mov	r17, r16
 226:	12 23       	and	r17, r18
 228:	12 b9       	out	0x02, r17	; 2
 22a:	07 95       	ror	r16
 22c:	07 95       	ror	r16
 22e:	32 b9       	out	0x02, r19	; 2
 230:	00 00       	nop
 232:	00 00       	nop
 234:	00 00       	nop
 236:	22 b9       	out	0x02, r18	; 2
 238:	10 2f       	mov	r17, r16
 23a:	12 23       	and	r17, r18
 23c:	12 b9       	out	0x02, r17	; 2
 23e:	00 1f       	adc	r16, r16
 240:	00 00       	nop
 242:	32 b9       	out	0x02, r19	; 2
 244:	00 00       	nop
 246:	00 00       	nop
 248:	00 00       	nop
 24a:	22 b9       	out	0x02, r18	; 2
 24c:	10 2f       	mov	r17, r16
 24e:	12 23       	and	r17, r18
 250:	12 b9       	out	0x02, r17	; 2
 252:	07 95       	ror	r16
 254:	07 95       	ror	r16
 256:	32 b9       	out	0x02, r19	; 2
 258:	07 95       	ror	r16
 25a:	00 00       	nop
 25c:	00 00       	nop
 25e:	22 b9       	out	0x02, r18	; 2
 260:	10 2f       	mov	r17, r16
 262:	12 23       	and	r17, r18
 264:	12 b9       	out	0x02, r17	; 2
 266:	00 1f       	adc	r16, r16
 268:	00 00       	nop
 26a:	32 b9       	out	0x02, r19	; 2
 26c:	00 00       	nop
 26e:	00 00       	nop
 270:	00 00       	nop
 272:	22 b9       	out	0x02, r18	; 2
 274:	10 2f       	mov	r17, r16
 276:	12 23       	and	r17, r18
 278:	12 b9       	out	0x02, r17	; 2
 27a:	07 95       	ror	r16
 27c:	00 00       	nop
 27e:	32 b9       	out	0x02, r19	; 2
 280:	00 00       	nop
 282:	00 00       	nop
 284:	00 00       	nop
 286:	22 b9       	out	0x02, r18	; 2
 288:	10 2f       	mov	r17, r16
 28a:	12 23       	and	r17, r18
 28c:	12 b9       	out	0x02, r17	; 2
 28e:	00 1f       	adc	r16, r16
 290:	00 00       	nop
 292:	32 b9       	out	0x02, r19	; 2
 294:	00 00       	nop
 296:	00 00       	nop
 298:	00 00       	nop
 29a:	22 b9       	out	0x02, r18	; 2
 29c:	10 2f       	mov	r17, r16
 29e:	12 23       	and	r17, r18
 2a0:	12 b9       	out	0x02, r17	; 2
 2a2:	07 95       	ror	r16
 2a4:	00 00       	nop
 2a6:	32 b9       	out	0x02, r19	; 2
 2a8:	00 00       	nop
 2aa:	00 00       	nop
 2ac:	00 00       	nop
 2ae:	22 b9       	out	0x02, r18	; 2
 2b0:	10 2f       	mov	r17, r16
 2b2:	12 23       	and	r17, r18
 2b4:	12 b9       	out	0x02, r17	; 2
 2b6:	00 1f       	adc	r16, r16
 2b8:	00 00       	nop
 2ba:	32 b9       	out	0x02, r19	; 2
 2bc:	00 00       	nop
 2be:	00 00       	nop
 2c0:	00 00       	nop
 2c2:	22 b9       	out	0x02, r18	; 2
 2c4:	10 2f       	mov	r17, r16
 2c6:	12 23       	and	r17, r18
 2c8:	12 b9       	out	0x02, r17	; 2
 2ca:	07 95       	ror	r16
 2cc:	00 00       	nop
 2ce:	32 b9       	out	0x02, r19	; 2
 2d0:	00 00       	nop
 2d2:	00 00       	nop
 2d4:	00 00       	nop
 2d6:	22 b9       	out	0x02, r18	; 2
 2d8:	10 2f       	mov	r17, r16
 2da:	12 23       	and	r17, r18
 2dc:	12 b9       	out	0x02, r17	; 2
 2de:	00 1f       	adc	r16, r16
 2e0:	51 91       	ld	r21, Z+
 2e2:	32 b9       	out	0x02, r19	; 2
 2e4:	00 00       	nop
 2e6:	00 00       	nop
 2e8:	00 00       	nop
 2ea:	22 b9       	out	0x02, r18	; 2
 2ec:	10 2f       	mov	r17, r16
 2ee:	12 23       	and	r17, r18
 2f0:	12 b9       	out	0x02, r17	; 2
 2f2:	00 00       	nop
 2f4:	4a 95       	dec	r20
 2f6:	32 b9       	out	0x02, r19	; 2
 2f8:	09 f0       	breq	.+2      	; 0x2fc <done8>
 2fa:	11 cf       	rjmp	.-478    	; 0x11e <byteLoop8>

000002fc <done8>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fc:	4f ef       	ldi	r20, 0xFF	; 255
 2fe:	50 e7       	ldi	r21, 0x70	; 112
 300:	72 e0       	ldi	r23, 0x02	; 2
 302:	41 50       	subi	r20, 0x01	; 1
 304:	50 40       	sbci	r21, 0x00	; 0
 306:	70 40       	sbci	r23, 0x00	; 0
 308:	e1 f7       	brne	.-8      	; 0x302 <done8+0x6>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <done8+0x10>
 30c:	00 00       	nop
		writeGRB8((uint8_t*)0x40);
		_delay_ms(100);
		i = i + 1;
 30e:	6f 5f       	subi	r22, 0xFF	; 255
		if(i == lineWidth + 1)
 310:	6e 32       	cpi	r22, 0x2E	; 46
 312:	09 f0       	breq	.+2      	; 0x316 <done8+0x1a>
 314:	96 ce       	rjmp	.-724    	; 0x42 <__SREG__+0x3>
 316:	94 ce       	rjmp	.-728    	; 0x40 <__SREG__+0x1>

00000318 <_exit>:
 318:	f8 94       	cli

0000031a <__stop_program>:
 31a:	ff cf       	rjmp	.-2      	; 0x31a <__stop_program>
